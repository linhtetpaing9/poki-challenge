import React, { useEffect } from "react";
import Head from "next/head";
import { Button, Col, Row, Select, SelectProps, Spin } from "antd";

import type { GetStaticProps, InferGetStaticPropsType } from "next";
import debounce from "lodash/debounce";

// create later from api
interface Product {}

// Usage of DebounceSelect
interface UserValue {
  label: string;
  value: string;
}

const Home = (props: InferGetStaticPropsType<typeof getStaticProps>) => {
  const products = [
    { name: "one" },
    { name: "two" },
    { name: "three" },
    { name: "four" },
    { name: "five" },
    { name: "six" },
    { name: "seven" },
  ];

  const [value, setValue] = React.useState<UserValue[]>([]);

  return (
    <div>
      <Head>
        <title>TCG Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="search__box">
        {/* <DebounceSelect
          mode="multiple"
          value={value}
          placeholder="Name.."
          fetchOptions={fetchUserList}
          onChange={(newValue) => {
            setValue(newValue);
          }}
          style={{ width: 170 }}
        /> */}
        <Row gutter={{ xs: 15, sm: 15, md: 0 }}>
          <Col xs={24} sm={24} md={9}>
            <Select
              className="name"
              showSearch
              placeholder="Name.."
              onChange={() => {}}
              size="large"
              options={[]}
            ></Select>
          </Col>
          <Col xs={8} sm={8} md={5}>
            <Select
              className="type"
              placeholder="Type"
              onChange={() => {}}
              size="large"
              options={[]}
            ></Select>
          </Col>
          <Col xs={8} sm={8} md={5}>
            <Select
              className="rarity"
              placeholder="Rarity"
              onChange={() => {}}
              size="large"
              options={[]}
            ></Select>
          </Col>
          <Col xs={8} sm={8} md={5}>
            <Select
              className="set"
              placeholder="Set"
              onChange={() => {}}
              size="large"
              showSearch
              options={[{ label: "Lucid", value: "lucid" }]}
            ></Select>
          </Col>
        </Row>
      </section>

      <section className="wrap">
        <Row gutter={73}>
          {products.map((product: any, key: any) => (
            <Col xs={24} sm={12} md={12} lg={8} key={`poki-product-${key}`}>
              <ProductCard product={product} />
            </Col>
          ))}
        </Row>
      </section>
    </div>
  );
};

// set proper type later
const ProductCard = ({ product }: any) => {
  console.log({ product });
  return (
    <div className="product__card">
      <img src="/img/test-img.png" />
      <div className="product__mask">
        <div className="product__content">
          <h2>Pokemon</h2>
          <p>rarity</p>
          <div className="price__item">
            <div>$2.49</div>
            <div>3 left</div>
          </div>
        </div>
        <Button>Select card</Button>
      </div>
    </div>
  );
};

async function fetchUserList(username: string): Promise<UserValue[]> {
  console.log("fetching user", username);

  return fetch("https://randomuser.me/api/?results=5")
    .then((response) => response.json())
    .then((body) =>
      body.results.map(
        (user: {
          name: { first: string; last: string };
          login: { username: string };
        }) => ({
          label: `${user.name.first} ${user.name.last}`,
          value: user.login.username,
        })
      )
    );
}

export interface DebounceSelectProps<ValueType = any>
  extends Omit<SelectProps<ValueType>, "options" | "children"> {
  fetchOptions: (search: string) => Promise<ValueType[]>;
  debounceTimeout?: number;
}

function DebounceSelect<
  ValueType extends {
    key?: string;
    label: React.ReactNode;
    value: string | number;
  } = any
>({ fetchOptions, debounceTimeout = 800, ...props }: DebounceSelectProps) {
  const [fetching, setFetching] = React.useState(false);
  const [options, setOptions] = React.useState<ValueType[]>([]);
  const fetchRef = React.useRef(0);

  const debounceFetcher = React.useMemo(() => {
    const loadOptions = (value: string) => {
      fetchRef.current += 1;
      const fetchId = fetchRef.current;
      setOptions([]);
      setFetching(true);

      fetchOptions(value).then((newOptions) => {
        if (fetchId !== fetchRef.current) {
          // for fetch callback order
          return;
        }

        setOptions(newOptions);
        setFetching(false);
      });
    };

    return debounce(loadOptions, debounceTimeout);
  }, [fetchOptions, debounceTimeout]);

  return (
    <Select<ValueType>
      labelInValue
      filterOption={false}
      onSearch={debounceFetcher}
      notFoundContent={fetching ? <Spin size="small" /> : null}
      {...props}
      options={options}
    />
  );
}

export default Home;

export const getStaticProps: GetStaticProps = async () => {
  // const res = await fetch("http://localhost:3000/api/product");
  // const people = await res.json();
  // if (!people) {
  //   return {
  //     notFound: true,
  //   };
  // }
  const people: any = [];
  return { props: { people } };
};
