import React, { useEffect, useState } from "react";
import Head from "next/head";
import {
  Avatar,
  Button,
  Col,
  Input,
  List,
  Row,
  Select,
  SelectProps,
  Skeleton,
  Spin,
} from "antd";

import type {
  GetServerSideProps,
  GetStaticProps,
  InferGetServerSidePropsType,
  InferGetStaticPropsType,
} from "next";
import debounce from "lodash/debounce";

import { PokemonTCG } from "pokemon-tcg-sdk-typescript";
import Router from "next/router";

interface PokemonCard extends PokemonTCG.Card {
  cardmarket?: any;
}

const Home = (
  props: InferGetServerSidePropsType<typeof getServerSideProps>
) => {
  const splitTypes = props.query?.q?.split(" ") || [];
  const rawParams = splitTypes.map((type: string) =>
    type.replaceAll("*", " ").split(":")
  );

  const [params, setParams] = useState(Object.fromEntries(rawParams));

  if (props.notFound) {
    return (
      <div className="error wrap">
        <h1>Couldn't find any cards matching your search criteria!</h1>
      </div>
    );
  }

  const typeOptions = props.types.map((type: PokemonTCG.Type) => ({
    label: type,
    value: type.replaceAll(" ", "*"),
  }));
  const rarityOptions = props.rarities.map((rarity: PokemonTCG.Rarity) => ({
    label: rarity,
    value: rarity.replaceAll(" ", "*"),
  }));
  const setOptions = props.sets.map((set: PokemonTCG.Set) => ({
    label: set.name,
    value: set.id.replaceAll(" ", "*"),
  }));

  const handleParams = (param: any) => (value: any) => {
    if (param == "name") {
      setParams({ ...params, [param]: `${value.target.value}*` });
    } else {
      setParams({ ...params, [param]: value });
    }
  };

  return (
    <div>
      <Head>
        <title>TCG Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="search__box">
        <Row gutter={{ xs: 15, sm: 15, md: 0 }}>
          <Col xs={24} sm={24} md={9}>
            <Input
              className="name"
              placeholder="Name.."
              onChange={debounce(handleParams("name"), 1000)}
              size="large"
              defaultValue={params.name}
            />
          </Col>
          <Col xs={8} sm={8} md={5}>
            <Select
              className="type"
              placeholder="Type"
              onChange={handleParams("types")}
              size="large"
              defaultValue={params.types}
              options={typeOptions}
              allowClear
            ></Select>
          </Col>
          <Col xs={8} sm={8} md={5}>
            <Select
              className="rarity"
              placeholder="Rarity"
              onChange={handleParams("rarity")}
              size="large"
              defaultValue={params.rarity}
              options={rarityOptions}
              allowClear
            ></Select>
          </Col>
          <Col xs={8} sm={8} md={5}>
            <Select
              className="set"
              placeholder="Set"
              onChange={handleParams("set.id")}
              size="large"
              defaultValue={params["set.id"]}
              options={setOptions}
              allowClear
            ></Select>
          </Col>
        </Row>
      </section>

      <section className="wrap">
        <LoadMoreList cards={props.cards} params={params} />
        {/* <Row gutter={73}>
          {props.cards.map((card: PokemonCard, key: any) => (
            <Col xs={24} sm={12} md={12} lg={8} key={`poki-product-${key}`}>
              <PokemonCard card={card} />
            </Col>
          ))}
        </Row> */}
      </section>
    </div>
  );
};

const LoadMoreList = (props: { cards: PokemonCard[]; params: any }) => {
  const [initLoading, setInitLoading] = useState(true);
  const [loading, setLoading] = useState(false);
  const [cards, setCards] = useState<PokemonCard[]>(props.cards);
  const [pageSize, setPageSize] = useState(12);

  useEffect(() => {
    const entries = Object.entries(props.params);
    const q = entries
      .filter(([, value]) => value)
      .map(([key, value]) => `${key}:${value}`)
      .join(" ");
    (async () => {
      const params: PokemonTCG.Parameter = {
        q: (q as string) || "",
        pageSize,
      };
      const pokemonCards: PokemonCard[] = await PokemonTCG.findCardsByQueries(
        params
      );

      setCards(pokemonCards);
    })();
    if (q) {
      Router.push(`/?q=${q}`, undefined, { shallow: true });
    }
    setLoading(false);
    setInitLoading(false);
  }, [props.params, pageSize]);

  const onLoadMore = () => {
    setLoading(true);
    setPageSize(pageSize + 12);
  };

  const loadMore =
    !initLoading && !loading ? (
      <div
        style={{
          textAlign: "center",
          marginTop: 12,
          height: 32,
          lineHeight: "32px",
        }}
      >
        <Button className="load__more" onClick={onLoadMore}>
          Load More
        </Button>
      </div>
    ) : null;

  return (
    <List
      className="demo-loadmore-list"
      loading={initLoading}
      itemLayout="horizontal"
      loadMore={loadMore}
      dataSource={cards}
      grid={{ gutter: 73, xs: 1, sm: 2, md: 2, lg: 3 }}
      renderItem={(card) => (
        <List.Item>
          <PokemonCard card={card} />
        </List.Item>
      )}
    />
  );
};

const PokemonCard = ({ card }: { card: PokemonCard }) => {
  const currency = "$";
  const price =
    (card?.cardmarket &&
      `${currency} ${
        card?.cardmarket?.prices?.averageSellPrice ||
        card?.cardmarket?.prices?.trendPrice
      }`) ||
    "Nego";

  return (
    <div className="product__card">
      <img src={card?.images?.small} />
      <div className="product__mask">
        <div className="product__content">
          <h2>{card?.name}</h2>
          <p>{card?.rarity}</p>
          <div className="price__item">
            <div>{price}</div>
            <div>{card?.set?.total} left</div>
          </div>
        </div>
        <Button>Select card</Button>
      </div>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { query } = context;
  const { size, q } = query;

  const params: PokemonTCG.Parameter = {
    q: (q as string) || "",
    pageSize: parseInt(size as string) || 12,
  };
  try {
    const cards: PokemonCard[] =
      (await PokemonTCG.findCardsByQueries(params)) || [];

    const types: PokemonTCG.Type[] = await PokemonTCG.getTypes();
    const rarities: PokemonTCG.Rarity[] = await PokemonTCG.getRarities();
    const sets: PokemonTCG.Set[] = await PokemonTCG.getAllSets();

    return { props: { query, cards, types, rarities, sets } };
  } catch (error) {
    console.log({ error });
    return { props: { notFound: true } };
  }
};
